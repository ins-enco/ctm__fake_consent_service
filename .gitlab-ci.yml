stages:
  - test
  - build
  - cleanup_previous_deployment
  - deploy
  
# Stage: Run Tests
run_tests:
  stage: test
  image: node:latest
  before_script:
    - npm install
  script:
    - npm run test
  allow_failure: true

# Stage 1: Build the Docker image
build_image:
  stage: build
  image: docker:27.2.1
  services:
    - docker:27.2.1-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG --build-arg DATABASE_URL=$DATABASE_URL --build-arg CTM_API_URL=$CTM_API_URL .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: always

# Stage 2: Clean up any previous containers or processes using the port
cleanup_previous_deployment:
  stage: cleanup_previous_deployment
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync sshpass
    # Create the SSH directory
    - mkdir -p ~/.ssh
    # Add the private key from the CI/CD variable
    - echo "$DEPLOY_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    # Set the correct permissions for the private key
    - chmod 600 ~/.ssh/id_rsa
    # Disable host key checking to avoid interactive prompts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    # Step 1: Stop and remove the existing container (if running)
    - ssh -o StrictHostKeyChecking=no $DEPLOY_SERVER_USR@$DEPLOY_SERVER_IP "docker stop $DEPLOY_CONTAINER_NAME || true && docker rm $DEPLOY_CONTAINER_NAME || true"

    # Step 2: Check if port 8030 is in use, and free it if necessary
    - ssh -o StrictHostKeyChecking=no $DEPLOY_SERVER_USR@$DEPLOY_SERVER_IP "if lsof -i :$DEPLOY_SERVER_PORT; then sudo kill -9 \$(lsof -t -i :$DEPLOY_SERVER_PORT); fi"
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/ # Only run for version tags
      when: on_success

# Stage 2: Deploy to the server
deploy_to_server:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync sshpass
    # Create the SSH directory
    - mkdir -p ~/.ssh
    # Add the private key from the CI/CD variable
    - echo "$DEPLOY_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    # Set the correct permissions for the private key
    - chmod 600 ~/.ssh/id_rsa
    # Disable host key checking to avoid interactive prompts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    #- ssh-keygen -y -f ~/.ssh/id_rsa
  script:
    # Step 1: Create the target folder if it doesn't exist
    - ssh -o StrictHostKeyChecking=no $DEPLOY_SERVER_USR@$DEPLOY_SERVER_IP "mkdir -p $DEPLOY_SERVER_PATH"
    # Step 2: Use rsync to copy docker-compose.yml and other necessary files to the remote server
    - rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./docker-compose.yml $DEPLOY_SERVER_USR@$DEPLOY_SERVER_IP:$DEPLOY_SERVER_PATH/
    # Step 3: SSH into the server and run docker-compose to pull the latest image and start the app
    - ssh -o StrictHostKeyChecking=no $DEPLOY_SERVER_USR@$DEPLOY_SERVER_IP "docker login -u '$CI_REGISTRY_USER' -p '$CI_REGISTRY_PASSWORD' $CI_REGISTRY && export CI_REGISTRY_IMAGE='$CI_REGISTRY_IMAGE' && export CI_COMMIT_TAG='$CI_COMMIT_TAG' && export HOST_PORT='$DEPLOY_SERVER_PORT' && export DATABASE_URL='$DATABASE_URL' && export CTM_API_URL='$CTM_API_URL' && export CONTAINER_NAME='$DEPLOY_CONTAINER_NAME' && cd $DEPLOY_SERVER_PATH && docker compose down && docker compose up -d"
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: on_success